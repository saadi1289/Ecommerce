document.addEventListener("DOMContentLoaded", () => {
  // Initialize all product functionality
  initializeProductsIndex()
  initializeProductForm()
  initializeImageUpload()
  initializeModals()
  initializeBulkActions()
  initializeFilters()
})

// Products Index Page Functionality
function initializeProductsIndex() {
  // Select all checkbox functionality
  const selectAllCheckbox = document.getElementById("selectAll")
  const productCheckboxes = document.querySelectorAll(".product-checkbox")
  const bulkActions = document.querySelector(".bulk-actions")

  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener("change", function () {
      productCheckboxes.forEach((checkbox) => {
        checkbox.checked = this.checked
      })
      toggleBulkActions()
    })
  }

  // Individual checkbox functionality
  productCheckboxes.forEach((checkbox) => {
    checkbox.addEventListener("change", () => {
      const checkedBoxes = document.querySelectorAll(".product-checkbox:checked")
      if (selectAllCheckbox) {
        selectAllCheckbox.checked = checkedBoxes.length === productCheckboxes.length
        selectAllCheckbox.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < productCheckboxes.length
      }
      toggleBulkActions()
    })
  })

  function toggleBulkActions() {
    const checkedBoxes = document.querySelectorAll(".product-checkbox:checked")
    if (bulkActions) {
      bulkActions.style.display = checkedBoxes.length > 0 ? "flex" : "none"
    }
  }

  // View toggle functionality
  const viewBtns = document.querySelectorAll(".view-btn")
  viewBtns.forEach((btn) => {
    btn.addEventListener("click", function () {
      viewBtns.forEach((b) => b.classList.remove("active"))
      this.classList.add("active")

      const view = this.dataset.view
      // Implement view switching logic here
      console.log("Switching to", view, "view")
    })
  })

  // Delete button functionality
  const deleteButtons = document.querySelectorAll(".delete-btn")
  deleteButtons.forEach((btn) => {
    btn.addEventListener("click", function () {
      const productId = this.dataset.id
      showDeleteModal(productId)
    })
  })
}

// Product Form Functionality
function initializeProductForm() {
  const productForm = document.getElementById("productForm")
  if (!productForm) return

  // Auto-generate slug from product name
  const nameInput = document.getElementById("name")
  const slugInput = document.getElementById("slug")

  if (nameInput && slugInput) {
    nameInput.addEventListener("input", function () {
      if (!slugInput.value || slugInput.dataset.autoGenerated !== "false") {
        const slug = this.value
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/^-+|-+$/g, "")
        slugInput.value = slug
        slugInput.dataset.autoGenerated = "true"
      }
    })

    slugInput.addEventListener("input", function () {
      this.dataset.autoGenerated = "false"
    })
  }

  // Form validation
  productForm.addEventListener("submit", (e) => {
    if (!validateProductForm()) {
      e.preventDefault()
    }
  })

  // Price calculation
  const priceInput = document.getElementById("price")
  const salePriceInput = document.getElementById("sale_price")

  if (priceInput && salePriceInput) {
    salePriceInput.addEventListener("input", function () {
      const regularPrice = Number.parseFloat(priceInput.value) || 0
      const salePrice = Number.parseFloat(this.value) || 0

      if (salePrice > regularPrice) {
        this.setCustomValidity("Sale price cannot be higher than regular price")
      } else {
        this.setCustomValidity("")
      }
    })
  }

  // Stock tracking toggle
  const trackQuantityCheckbox = document.getElementById("track_quantity")
  const stockFields = document.querySelectorAll("#stock_quantity, #low_stock_threshold")

  if (trackQuantityCheckbox) {
    trackQuantityCheckbox.addEventListener("change", function () {
      stockFields.forEach((field) => {
        field.disabled = !this.checked
        if (!this.checked) {
          field.value = ""
        }
      })
    })
  }

  // Tags input functionality
  const tagsInput = document.getElementById("tags")
  if (tagsInput) {
    tagsInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault()
        // Add tag functionality here
      }
    })
  }
}

// Image Upload Functionality
function initializeImageUpload() {
  // Main image upload
  const mainImageUpload = document.getElementById("mainImageUpload")
  const mainImageInput = document.getElementById("main_image")
  const mainImagePreview = document.getElementById("mainImagePreview")
  const removeMainImageBtn = document.getElementById("removeMainImage")
  const changeMainImageBtn = document.getElementById("changeMainImage")

  if (mainImageUpload && mainImageInput) {
    mainImageUpload.addEventListener("click", () => mainImageInput.click())
    mainImageUpload.addEventListener("dragover", handleDragOver)
    mainImageUpload.addEventListener("drop", (e) => handleDrop(e, mainImageInput))

    mainImageInput.addEventListener("change", function () {
      if (this.files && this.files[0]) {
        previewMainImage(this.files[0])
      }
    })
  }

  if (removeMainImageBtn) {
    removeMainImageBtn.addEventListener("click", () => {
      removeMainImage()
    })
  }

  if (changeMainImageBtn) {
    changeMainImageBtn.addEventListener("click", () => {
      mainImageInput.click()
    })
  }

  // Gallery images upload
  const galleryUploadItems = document.querySelectorAll(".gallery-upload-item")
  galleryUploadItems.forEach((item) => {
    const input = item.querySelector('input[type="file"]')
    if (input) {
      item.addEventListener("click", () => input.click())
      item.addEventListener("dragover", handleDragOver)
      item.addEventListener("drop", (e) => handleDrop(e, input))

      input.addEventListener("change", function () {
        if (this.files && this.files[0]) {
          previewGalleryImage(this.files[0], item)
        }
      })
    }
  })

  // Gallery image actions
  const galleryDeleteBtns = document.querySelectorAll(".gallery-action-btn.delete-btn")
  galleryDeleteBtns.forEach((btn) => {
    btn.addEventListener("click", function (e) {
      e.stopPropagation()
      const imageItem = this.closest(".gallery-image-item")
      if (imageItem) {
        imageItem.remove()
      }
    })
  })

  function handleDragOver(e) {
    e.preventDefault()
    e.currentTarget.classList.add("drag-over")
  }

  function handleDrop(e, input) {
    e.preventDefault()
    e.currentTarget.classList.remove("drag-over")

    const files = e.dataTransfer.files
    if (files.length > 0) {
      input.files = files
      input.dispatchEvent(new Event("change"))
    }
  }

  function previewMainImage(file) {
    const reader = new FileReader()
    reader.onload = (e) => {
      const img = mainImagePreview.querySelector("img")
      if (img) {
        img.src = e.target.result
        mainImageUpload.style.display = "none"
        mainImagePreview.style.display = "block"
      }
    }
    reader.readAsDataURL(file)
  }

  function removeMainImage() {
    mainImageInput.value = ""
    mainImageUpload.style.display = "block"
    mainImagePreview.style.display = "none"
  }

  function previewGalleryImage(file, uploadItem) {
    const reader = new FileReader()
    reader.onload = (e) => {
      const imageItem = document.createElement("div")
      imageItem.className = "gallery-image-item"
      imageItem.innerHTML = `
                <img src="${e.target.result}" alt="Gallery image">
                <div class="gallery-image-actions">
                    <button type="button" class="gallery-action-btn edit-btn">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="gallery-action-btn delete-btn">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `

      uploadItem.parentNode.insertBefore(imageItem, uploadItem)

      // Add delete functionality to new button
      const deleteBtn = imageItem.querySelector(".delete-btn")
      deleteBtn.addEventListener("click", (e) => {
        e.stopPropagation()
        imageItem.remove()
      })
    }
    reader.readAsDataURL(file)
  }
}

// Modal Functionality
function initializeModals() {
  const deleteModal = document.getElementById("deleteModal")
  const closeModalBtn = document.getElementById("closeModal")
  const cancelDeleteBtn = document.getElementById("cancelDelete")
  const confirmDeleteBtn = document.getElementById("confirmDelete")

  if (closeModalBtn) {
    closeModalBtn.addEventListener("click", hideDeleteModal)
  }

  if (cancelDeleteBtn) {
    cancelDeleteBtn.addEventListener("click", hideDeleteModal)
  }

  if (confirmDeleteBtn) {
    confirmDeleteBtn.addEventListener("click", function () {
      const productId = this.dataset.productId
      deleteProduct(productId)
    })
  }

  // Close modal when clicking outside
  if (deleteModal) {
    deleteModal.addEventListener("click", function (e) {
      if (e.target === this) {
        hideDeleteModal()
      }
    })
  }
}

function showDeleteModal(productId) {
  const deleteModal = document.getElementById("deleteModal")
  const confirmDeleteBtn = document.getElementById("confirmDelete")

  if (deleteModal && confirmDeleteBtn) {
    confirmDeleteBtn.dataset.productId = productId
    deleteModal.classList.add("show")
    document.body.style.overflow = "hidden"
  }
}

function hideDeleteModal() {
  const deleteModal = document.getElementById("deleteModal")
  if (deleteModal) {
    deleteModal.classList.remove("show")
    document.body.style.overflow = ""
  }
}

function deleteProduct(productId) {
  // Implement delete functionality
  console.log("Deleting product:", productId)

  // Show loading state
  const confirmBtn = document.getElementById("confirmDelete")
  if (confirmBtn) {
    confirmBtn.classList.add("loading")
    confirmBtn.disabled = true
  }

  // Simulate API call
  setTimeout(() => {
    hideDeleteModal()
    showNotification("Product deleted successfully", "success")

    // Remove product row from table
    const productRow = document.querySelector(`[data-id="${productId}"]`).closest("tr")
    if (productRow) {
      productRow.remove()
    }

    if (confirmBtn) {
      confirmBtn.classList.remove("loading")
      confirmBtn.disabled = false
    }
  }, 1500)
}

// Bulk Actions Functionality
function initializeBulkActions() {
  const applyBulkActionBtn = document.getElementById("applyBulkAction")
  const bulkSelect = document.querySelector(".bulk-select")

  if (applyBulkActionBtn) {
    applyBulkActionBtn.addEventListener("click", () => {
      const action = bulkSelect.value
      const selectedProducts = Array.from(document.querySelectorAll(".product-checkbox:checked")).map(
        (checkbox) => checkbox.value,
      )

      if (!action) {
        showNotification("Please select an action", "warning")
        return
      }

      if (selectedProducts.length === 0) {
        showNotification("Please select products", "warning")
        return
      }

      applyBulkAction(action, selectedProducts)
    })
  }
}

function applyBulkAction(action, productIds) {
  console.log("Applying bulk action:", action, "to products:", productIds)

  // Show loading state
  const applyBtn = document.getElementById("applyBulkAction")
  if (applyBtn) {
    applyBtn.classList.add("loading")
    applyBtn.disabled = true
  }

  // Simulate API call
  setTimeout(() => {
    let message = ""
    switch (action) {
      case "activate":
        message = `${productIds.length} products activated successfully`
        break
      case "deactivate":
        message = `${productIds.length} products deactivated successfully`
        break
      case "delete":
        message = `${productIds.length} products deleted successfully`
        break
    }

    showNotification(message, "success")

    // Reset selections
    document.getElementById("selectAll").checked = false
    document.querySelectorAll(".product-checkbox").forEach((cb) => (cb.checked = false))
    document.querySelector(".bulk-actions").style.display = "none"

    if (applyBtn) {
      applyBtn.classList.remove("loading")
      applyBtn.disabled = false
    }
  }, 1500)
}

// Filters Functionality
function initializeFilters() {
  const filterInputs = document.querySelectorAll("#categoryFilter, #statusFilter, #priceRange, #searchProducts")
  const clearFiltersBtn = document.getElementById("clearFilters")

  filterInputs.forEach((input) => {
    input.addEventListener("change", applyFilters)
  })

  const searchInput = document.getElementById("searchProducts")
  if (searchInput) {
    let searchTimeout
    searchInput.addEventListener("input", () => {
      clearTimeout(searchTimeout)
      searchTimeout = setTimeout(applyFilters, 500)
    })
  }

  if (clearFiltersBtn) {
    clearFiltersBtn.addEventListener("click", () => {
      filterInputs.forEach((input) => {
        input.value = ""
      })
      applyFilters()
    })
  }
}

function applyFilters() {
  const category = document.getElementById("categoryFilter")?.value || ""
  const status = document.getElementById("statusFilter")?.value || ""
  const priceRange = document.getElementById("priceRange")?.value || ""
  const search = document.getElementById("searchProducts")?.value || ""

  console.log("Applying filters:", { category, status, priceRange, search })

  // Implement filter logic here
  // This would typically make an AJAX request to filter products
}

// Form Validation
function validateProductForm() {
  let isValid = true
  const requiredFields = document.querySelectorAll("[required]")

  requiredFields.forEach((field) => {
    const errorElement = document.getElementById(field.id + "-error")

    if (!field.value.trim()) {
      if (errorElement) {
        errorElement.textContent = "This field is required"
        errorElement.style.display = "block"
      }
      field.classList.add("error")
      isValid = false
    } else {
      if (errorElement) {
        errorElement.style.display = "none"
      }
      field.classList.remove("error")
    }
  })

  // Validate SKU uniqueness (simulate)
  const skuInput = document.getElementById("sku")
  if (skuInput && skuInput.value) {
    // This would typically check against existing SKUs via AJAX
    console.log("Validating SKU:", skuInput.value)
  }

  return isValid
}

// Utility Functions
function showNotification(message, type = "info") {
  // Use the notification system from admin-dashboard.js
  if (window.AdminDashboard && window.AdminDashboard.showNotification) {
    window.AdminDashboard.showNotification(message, type)
  } else {
    // Fallback notification
    alert(message)
  }
}

function formatPrice(price) {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(price)
}

function formatDate(date) {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  }).format(new Date(date))
}

// Export functions for external use
window.ProductsManager = {
  showDeleteModal,
  hideDeleteModal,
  deleteProduct,
  applyBulkAction,
  showNotification,
  formatPrice,
  formatDate,
}
